// Generated by CoffeeScript 1.8.0
(function() {
  var $, createDiv, createTOC, findPos, format, initSyntaxHighlight, space;
  $ = function(qs, self) {
    if (self == null) {
      self = document;
    }
    return self.querySelectorAll(qs);
  };
  createDiv = function(str) {
    var div;
    div = document.createElement('div');
    div.innerHTML = str;
    return div;
  };
  space = function(n) {
    var _i, _results;
    return (function() {
      _results = [];
      for (var _i = 0; 0 <= n ? _i < n : _i > n; 0 <= n ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this).map(function() {
      return '<b class="space">-</b>';
    }).join('');
  };
  format = function(minH, h) {
    var div, n, tag;
    n = +h.tagName.match(/\d+/) - minH;
    tag = 'h' + (n + 1);
    div = createDiv("<" + tag + " data-n=\"" + n + "\" class=\"\">\n	" + (space(n)) + "\n	" + (h.textContent.trim()) + "\n</" + tag + ">");
    if (n === 0) {
      $(tag, div)[0].classList.add('bold');
    }
    $(tag, div)[0].addEventListener('click', function() {
      return h.scrollIntoView();
    });
    return div;
  };
  findPos = function(obj) {
    var curtop;
    curtop = 0;
    if (obj.offsetParent) {
      while (obj = obj.offsetParent) {
        curtop += obj.offsetTop;
      }
      curtop += obj.offsetTop;
    }
    return curtop;
  };
  createTOC = function() {
    var allH, content, el, hList, m, minH, toc, _i, _len;
    hList = [];
    allH = $('h1, h2, h3, h4, h5, h6', $('#main')[0]);
    minH = [].slice.apply(allH).reduce(function(m, el) {
      var n;
      n = +el.tagName.match(/h(\d)/i)[1];
      if (m < n) {
        return m;
      } else {
        return n;
      }
    }, 100);
    for (_i = 0, _len = allH.length; _i < _len; _i++) {
      el = allH[_i];
      if ((m = el.tagName.match(/h\d+/i))) {
        hList.push(format(minH, el));
      }
    }
    toc = $('#toc')[0];
    content = $('.content', toc)[0];
    if (hList.length === 0) {
      toc.style.display = 'none';
      return;
    } else {
      $('#main')[0].classList.add('toc');
    }
    hList.forEach(function(el) {
      return content.appendChild(el);
    });
    return document.body.appendChild(toc);
  };
  initSyntaxHighlight = function() {
    var alias, extraAlias, k, v;
    [].slice.apply(document.querySelectorAll('pre code[class]')).forEach(function(el) {
      var brush, lang;
      lang = el.getAttribute('class').replace('lang-', '');
      brush = 'brush: ' + lang + ' highlight: ' + location.hash.replace('#L', '');
      el.parentElement.setAttribute('class', brush);
      return el.parentElement.innerHTML = el.innerHTML;
    });
    SyntaxHighlighter.defaults['toolbar'] = false;
    extraAlias = {
      CoffeeScript: ['Cakefile', 'cakefile', 'jade'],
      Sass: ['styl', 'stylus'],
      Bash: ['conf', 'sh', 'yml', '.bashrc', '.bash_profile', '.zshrc', '.vimrc', '.gitignore'],
      JScript: ['json'],
      Xml: ['ejs'],
      CSS: ['less', 'scss']
    };
    for (k in extraAlias) {
      v = extraAlias[k];
      alias = SyntaxHighlighter.brushes[k].aliases;
      SyntaxHighlighter.brushes[k].aliases = alias.concat(v);
    }
    SyntaxHighlighter.all();
    return window.addEventListener('load', function() {
      return setTimeout(function() {
        var _ref;
        return (_ref = document.querySelector('.highlighted')) != null ? _ref.scrollIntoView() : void 0;
      }, 0);
    });
  };
  createTOC();
  return initSyntaxHighlight();
})();
