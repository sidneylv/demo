// Generated by CoffeeScript 1.8.0
var cmder, findPlugin, init, isAction, kit, libPath, nobone, nodeLibPath, opts, runApp, runDir;

cmder = require('commander');

nobone = require('./nobone');

kit = nobone.kit;

libPath = kit.path.normalize("" + __dirname + "/../node_modules");

nodeLibPath = kit.path.normalize("" + __dirname + "/../../");

isAction = false;

opts = {
  port: 8013,
  host: '0.0.0.0',
  rootDir: './'
};

findPlugin = function(name) {
  var dir, dirname, paths, prefix, ps, searchDirs, _i, _len;
  searchDirs = kit.generateNodeModulePaths(name).slice(1);
  searchDirs = searchDirs.concat([kit.path.join(nodeLibPath, name), kit.path.join(libPath, name)]);
  paths = [];
  for (_i = 0, _len = searchDirs.length; _i < _len; _i++) {
    dir = searchDirs[_i];
    if (dir.slice(-1) === '*') {
      prefix = kit.path.basename(dir).slice(0, -1);
      dirname = kit.path.dirname(dir);
      try {
        ps = kit.fs.readdirSync(dirname).filter(function(p) {
          return p.indexOf(prefix) === 0;
        });
        paths = paths.concat(ps.map(function(p) {
          return kit.path.join(dirname, p);
        }));
      } catch (_error) {}
    } else {
      if (kit.fs.existsSync(dir)) {
        paths.push(dir);
      }
    }
  }
  return kit._.uniq(paths);
};

cmder.usage("[action] [options] [rootDir or coffeeFile or jsFile].\n\n    Default rootDir is current folder.\n\n    Any package, whether npm installed locally or globally, that is\n    prefixed with 'nobone-' will be treat as a nobone plugin. You can\n    use 'nobone <pluginName> [args]' to run a plugin.\n    Note that the 'pluginName' should be without the 'nobone-' prefix.").option('-p, --port <port>', "Server port. Default is " + opts.port + ".", function(d) {
  return +d;
}).option('--host <host>', "Host to listen to. Default is " + opts.host + " only.").option('-i, --interactive', "Start as interactive mode.").option('-w, --watch <list>', "Watch list to auto-restart server.String or JSON array. If 'off', nothing will be watched.", function(list) {
  try {
    return eval(list);
  } catch (_error) {
    return [list];
  }
}).option('--no-open-dir', "Disable auto-open the static file site.").option('-v, --ver', 'Print version.').option('-d, --doc', 'Open the web documentation.');

cmder.command('ls').description('List all available nobone plugins.').action(function() {
  var list;
  isAction = true;
  list = findPlugin('nobone-*').map(function(path) {
    var conf, name, ver;
    conf = require(path + '/package');
    name = kit.path.basename(path).replace('nobone-', '').cyan;
    ver = ('@' + conf.version).green;
    return "" + name + ver + " " + conf.description + " [" + path.grey + "]";
  });
  return console.log("\n" + 'Available Plugins:'.grey + "\n\n" + (list.join('\n\n')));
});

cmder.parse(process.argv);

init = function() {
  var cmd, nb, path, paths, pluginPath, server;
  if (cmder.args[0]) {
    pluginPath = 'nobone-' + cmder.args[0];
    if (kit.fs.existsSync(cmder.args[0])) {
      if (kit.fs.statSync(cmder.args[0]).isFile()) {
        return runApp();
      } else {
        opts.rootDir = cmder.args[0];
      }
    } else if ((paths = findPlugin(pluginPath), paths.length > 0)) {
      runApp(paths[0]);
      return;
    } else {
      kit.err('Nothing executable: '.red + cmder.args[0]);
      return;
    }
  }
  if (cmder.interactive) {
    nb = nobone();
    kit._.extend(global, nb);
    kit._.extend(global, {
      nobone: nobone,
      _: kit._,
      Promise: kit.Promise
    });
    cmd = require('coffee-script/lib/coffee-script/command');
    cmd.run();
    return;
  }
  if (cmder.ver) {
    path = require.resolve('./nobone');
    console.log(("" + (nobone.version()) + " ").green + ("(" + path + ")").grey);
    return;
  }
  if (cmder.doc) {
    server = require('./docServer');
    opts.port = cmder.port ? cmder.port : 8963;
    opts.openDir = cmder.openDir;
    server(opts);
    return;
  }
  return runDir();
};

runApp = function(plugin) {
  var args, pathArr, watchList;
  if (!process.env.NODE_PATH || process.env.NODE_PATH.indexOf(libPath) < 0) {
    pathArr = [libPath, nodeLibPath];
    if (process.env.NODE_PATH) {
      pathArr.push(process.env.NODE_PATH);
    }
    process.env.NODE_PATH = pathArr.join(kit.path.delimiter);
    args = process.argv.slice(1);
    watchList = cmder.args.filter(function(el) {
      return kit.fs.fileExistsSync(el);
    });
    if (cmder.watch) {
      watchList = cmder.watch;
    }
    return kit.monitorApp({
      args: args,
      watchList: watchList
    });
  } else {
    require('coffee-script/register');
    if (plugin) {
      return require(plugin);
    } else {
      return require(kit.fs.realpathSync(cmder.args[0]));
    }
  }
};

runDir = function() {
  if (cmder.port) {
    opts.port = cmder.port;
  }
  return kit.monitorApp({
    args: [__dirname + '/staticServer.js', opts.host, opts.port, opts.rootDir, cmder.openDir],
    watchList: opts.watch || 'off'
  });
};

if (!isAction) {
  init();
}
