// Generated by CoffeeScript 1.8.0

/**
 * NoBone has several modules and a helper lib.
 * **All the modules are optional**.
 * Only the `kit` lib is loaded by default and is not optional.
 *
 * Most of the async functions are implemented with [Promise][Promise].
 * [Promise]: https://github.com/petkaantonov/bluebird
 */
var Overview, Promise, kit, nobone, _;

Overview = 'nobone';

kit = require('./kit');

_ = kit._, Promise = kit.Promise;


/**
 * Main constructor.
 * @param  {Object} modules By default, it only load two modules,
 * `service` and `renderer`:
 * ```coffee
 * {
 * 	service: {}
 * 	renderer: {}
 * 	db: null
 * 	proxy: null
 * 	lang: null
 *
 * 	langPath: null # language set directory
 * }
 * ```
 * @param {Object} opts Defaults:
 * ```coffee
 * {
 * 	# Whether to auto-check the version of nobone.
 * 	checkUpgrade: true
 *
 *	# Whether to enable the sse live reload.
 * 	autoReload: true
 * }
 * ```
 * @return {Object} A nobone instance.
 */

nobone = function(modules, opts) {
  var close, k, mod, nb, v;
  if (opts == null) {
    opts = {};
  }
  if (modules == null) {
    modules = {
      service: {},
      renderer: {},
      db: null,
      proxy: null,
      lang: null
    };
  }
  _.defaults(opts, {
    checkUpgrade: true,
    autoReload: true
  });
  nb = {
    kit: kit
  };
  for (k in modules) {
    v = modules[k];
    if (modules[k]) {
      mod = require('./modules/' + k);
      nobone[k] = mod;
      nb[k] = mod(v);
    }
  }
  if (opts.autoReload && nb.renderer) {
    nb.renderer.on('fileModified', function(path, extBin, reqPath) {
      var _ref, _ref1;
      return (_ref = nb.service) != null ? (_ref1 = _ref.sse) != null ? _ref1.emit('fileModified', {
        path: path,
        extBin: extBin,
        reqPath: reqPath
      }, '/autoReload') : void 0 : void 0;
    });
  }
  if (opts.checkUpgrade) {
    nobone.checkUpgrade();
  }

  /**
  	 * Release the resources.
  	 * @return {Promise}
   */
  close = function() {
    return Promise.all(_.map(modules, function(v, k) {
      mod = nb[k];
      if (v && mod.close) {
        if (mod.close.length > 0) {
          return kit.promisify(mod.close, mod)();
        } else {
          return Promise.resolve(mod.close());
        }
      }
    }));
  };
  nb.close = close;
  return nb;
};

_.extend(nobone, {
  kit: kit,

  /**
  	 * Get current nobone version string.
  	 * @return {String}
   */
  version: function() {
    return require('../package').version;
  },

  /**
  	 * Check if nobone need to be upgraded.
  	 * @return {Promise}
   */
  checkUpgrade: function() {
    return kit.request('https://registry.npmjs.org/nobone/latest').done(function(data) {
      var curr_ver, info, path, ver;
      ver = JSON.parse(data).version;
      curr_ver = nobone.version();
      if (ver > curr_ver) {
        path = kit.path.normalize(kit.path.join(__dirname, '..'));
        info = ("nobone@" + ver).green;
        return console.warn("[ A new version of ".grey + info + " is available. ".grey + ("Current is v" + curr_ver + " (" + path + ")]").grey);
      }
    });
  },

  /**
  	 * The NoBone client helper.
  	 * @static
  	 * @param {Object} opts The options of the client, defaults:
  	 * ```coffee
  	 * {
  	 * 	autoReload: kit.isDevelopment()
  	 * 	host: '' # The host of the event source.
  	 * }
  	 * ```
  	 * @param {Boolean} useJs By default use html. Default is false.
  	 * @return {String} The code of client helper.
   */
  client: function(opts, useJs) {
    var js, optsStr;
    if (opts == null) {
      opts = {};
    }
    if (useJs == null) {
      useJs = false;
    }
    if (nobone.clientJsCache) {
      js = nobone.clientJsCache;
    } else {
      js = kit.fs.readFileSync(__dirname + '/../dist/noboneClient.js');
      nobone.clientJsCache = js;
    }
    optsStr = JSON.stringify(_.defaults(opts, {
      autoReload: kit.isDevelopment(),
      host: ''
    }));
    js = "\n" + js + "\nwindow.nb = new Nobone(" + optsStr + ");\n";
    if (useJs) {
      return js;
    } else {
      return "\n\n<!-- Nobone Client Helper -->\n<script type=\"text/javascript\">\n" + js + "\n</script>\n\n";
    }
  }
});

module.exports = nobone;
